// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –≤–∏–¥–∂–µ—Ç–∞ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–∫–∞–∑–æ–≤
class OrdersCalendarWidget {
  constructor(params = {}) {
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∏–¥–∂–µ—Ç–∞
    this.config = {
      debugMode: true,
      version: "1.0.5",
    };

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞
    this.state = {
      currentDate: new Date(),
      dealsData: {},
      selectedDate: null,
      isLoading: false,
      context: this.detectContext(params),
      entityType: params?.entity_type || "leads",
      accountDomain: this.extractAccountDomain(params),
      widgetParams: params,
      location: params?.location || "standalone",
      settings: params?.settings || {},
    };

    // ID –ø–æ–ª–µ–π (–º–æ–≥—É—Ç –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö)
    this.fieldIds = {
      ORDER_DATE: this.state.settings?.deal_date_field_id || 885453,
      DELIVERY_RANGE: this.state.settings?.delivery_range_field || 892009,
      EXACT_TIME: 892003,
      ADDRESS: 887367,
    };

    // –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
    this.i18n = {
      months: [
        "–Ø–Ω–≤–∞—Ä—å",
        "–§–µ–≤—Ä–∞–ª—å",
        "–ú–∞—Ä—Ç",
        "–ê–ø—Ä–µ–ª—å",
        "–ú–∞–π",
        "–ò—é–Ω—å",
        "–ò—é–ª—å",
        "–ê–≤–≥—É—Å—Ç",
        "–°–µ–Ω—Ç—è–±—Ä—å",
        "–û–∫—Ç—è–±—Ä—å",
        "–ù–æ—è–±—Ä—å",
        "–î–µ–∫–∞–±—Ä—å",
      ],
      weekdays: ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"],
      errors: {
        load: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö",
        noDeals: "–ù–µ—Ç —Å–¥–µ–ª–æ–∫ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É",
        noAuth: "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ amoCRM",
        settingsSave: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫",
      },
      labels: {
        dealsFor: "–°–¥–µ–ª–∫–∏ –Ω–∞",
        selectDate: "–≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É",
        authButton: "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ amoCRM",
        today: "–°–µ–≥–æ–¥–Ω—è",
        openCalendar: "–û—Ç–∫—Ä—ã—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å",
        save: "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
        settingsTitle: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∑–∞–∫–∞–∑–æ–≤",
      },
    };

    // –≠–ª–µ–º–µ–Ω—Ç—ã DOM
    this.container = document.getElementById("widget-root");
    if (!this.container) {
      console.error("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤–∏–¥–∂–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    this.initialize();
  }

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã –≤–∏–¥–∂–µ—Ç–∞
  detectContext(params) {
    if (typeof AmoProxySDK !== "undefined") return "proxy_sdk";
    if (typeof AmoSDK !== "undefined" && params?.entity_type) return "card_sdk";
    if (typeof AmoCRM !== "undefined") return "widget";
    if (window.location.pathname.includes("settings")) return "settings";
    return "standalone";
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–º–µ–Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
  extractAccountDomain(params) {
    if (typeof AmoCRM !== "undefined" && AmoCRM.widgets.system?.account) {
      return AmoCRM.widgets.system.account;
    }
    if (params?.account) {
      return params.account;
    }
    return window.location.hostname.split(".")[0] || "";
  }

  // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  initialize() {
    try {
      switch (this.state.location) {
        case "lcard-1":
        case "ccard-0":
          this.initCardMode();
          break;
        case "llist-0":
        case "clist-0":
          this.initListMode();
          break;
        case "settings":
          this.initSettingsMode();
          break;
        case "card_sdk":
          this.initSDKMode();
          break;
        default:
          this.initStandaloneMode();
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∏–¥–∂–µ—Ç–∞:", error);
      this.showFatalError();
    }
  }

  // –†–µ–∂–∏–º –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ (–∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –≤–∏–¥)
  initCardMode() {
    this.container.innerHTML = `
      <div class="compact-view">
        <h3 class="widget-title">–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–∫–∞–∑–æ–≤</h3>
        <div class="mini-calendar"></div>
        <button id="showFullCalendar" class="btn btn-sm btn-primary mt-2">
          ${this.i18n.labels.openCalendar}
        </button>
      </div>
    `;

    document
      .getElementById("showFullCalendar")
      ?.addEventListener("click", () => this.showFullView());
    this.renderMiniCalendar();
  }

  // –†–µ–∂–∏–º –¥–ª—è —Å–ø–∏—Å–∫–∞
  initListMode() {
    this.container.innerHTML = `
      <div class="list-view">
        <h3 class="widget-title">–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–∫–∞–∑–æ–≤</h3>
        <div class="calendar-summary"></div>
      </div>
    `;
    this.renderSummary();
  }

  // –†–µ–∂–∏–º –Ω–∞—Å—Ç—Ä–æ–µ–∫
  initSettingsMode() {
    this.container.innerHTML = `
      <div class="settings-form">
        <h2>${this.i18n.labels.settingsTitle}</h2>
        <div class="mb-3">
          <label class="form-label">ID –ø–æ–ª—è –¥–∞—Ç—ã –∑–∞–∫–∞–∑–∞:</label>
          <input type="number" class="form-control" id="dealDateField" 
                 value="${this.fieldIds.ORDER_DATE}">
        </div>
        <div class="mb-3">
          <label class="form-label">ID –ø–æ–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:</label>
          <input type="number" class="form-control" id="deliveryRangeField" 
                 value="${this.fieldIds.DELIVERY_RANGE}">
        </div>
        <button id="saveSettings" class="btn btn-primary">
          ${this.i18n.labels.save}
        </button>
      </div>
    `;

    document
      .getElementById("saveSettings")
      ?.addEventListener("click", () => this.saveSettings());
  }

  // –†–µ–∂–∏–º SDK
  initSDKMode() {
    this.container.innerHTML = `
      <div class="sdk-view">
        <h3>–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–∫–∞–∑–æ–≤</h3>
        <div class="sdk-calendar"></div>
      </div>
    `;
    this.renderSDKCalendar();
  }

  // –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º
  initStandaloneMode() {
    this.container.innerHTML = `
      <div class="standalone-view">
        <h2>–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–∫–∞–∑–æ–≤</h2>
        <div class="auth-section">
          <p>${this.i18n.errors.noAuth}</p>
          <button id="authButton" class="btn btn-primary">
            <span class="me-2">üîí</span>
            ${this.i18n.labels.authButton}
          </button>
        </div>
      </div>
    `;

    document.getElementById("authButton")?.addEventListener("click", () => {
      window.open(
        `https://${this.state.accountDomain}.amocrm.ru/oauth2/authorize`,
        "_blank"
      );
    });
  }

  // –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –∫–∞–ª–µ–Ω–¥–∞—Ä—è
  showFullView() {
    this.container.innerHTML = `
      <div class="full-calendar-view">
        <header class="widget-header mb-4">
          <h1 class="text-center mb-0">–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–∫–∞–∑–æ–≤</h1>
        </header>
        
        <div class="calendar-controls d-flex justify-content-between mb-3">
          <button id="prevMonth" class="btn btn-outline-primary">
            &lt; –ü—Ä–µ–¥—ã–¥—É—â–∏–π
          </button>
          <h2 id="currentMonthYear" class="text-center mb-0 fs-4"></h2>
          <button id="nextMonth" class="btn btn-outline-primary">
            –°–ª–µ–¥—É—é—â–∏–π &gt;
          </button>
        </div>
        
        <div id="calendar" class="calendar-grid mb-4"></div>
        
        <div class="deal-list-section">
          <h3 class="mb-3">
            <span>${this.i18n.labels.dealsFor}</span>
            <span id="selectedDate">${this.i18n.labels.selectDate}</span>
          </h3>
          <div id="deals" class="deals-container"></div>
        </div>
      </div>
    `;

    this.bindCalendarEvents();
    this.loadData().then(() => this.renderCalendar());
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Å–¥–µ–ª–∫–∞—Ö
  async loadData() {
    if (this.state.isLoading) return;
    this.state.isLoading = true;
    this.showLoader();

    try {
      const dateFrom = new Date(
        this.state.currentDate.getFullYear(),
        this.state.currentDate.getMonth() - 1,
        1
      );
      const dateTo = new Date(
        this.state.currentDate.getFullYear(),
        this.state.currentDate.getMonth() + 2,
        0
      );

      let deals = [];

      // –ó–∞–≥—Ä—É–∑–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      if (this.state.context === "proxy_sdk") {
        deals = await AmoProxySDK.getLeads({
          filter: {
            [this.fieldIds.ORDER_DATE]: {
              from: Math.floor(dateFrom.getTime() / 1000),
              to: Math.floor(dateTo.getTime() / 1000),
            },
          },
        });
      } else if (
        this.state.context === "card_sdk" &&
        typeof AmoSDK !== "undefined"
      ) {
        deals = await AmoSDK.getLeads({
          filter: {
            [this.fieldIds.ORDER_DATE]: {
              from: Math.floor(dateFrom.getTime() / 1000),
              to: Math.floor(dateTo.getTime() / 1000),
            },
          },
        });
      } else if (typeof AmoCRM !== "undefined") {
        const response = await AmoCRM.request("/api/v4/leads", {
          filter: {
            [this.fieldIds.ORDER_DATE]: {
              from: Math.floor(dateFrom.getTime() / 1000),
              to: Math.floor(dateTo.getTime() / 1000),
            },
          },
        });
        deals = response._embedded?.leads || [];
      }

      this.processDealsData(deals);
      return deals;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", error);
      this.showError(this.i18n.errors.load);
      return [];
    } finally {
      this.state.isLoading = false;
      this.hideLoader();
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Å–¥–µ–ª–∫–∞—Ö
  processDealsData(deals) {
    this.state.dealsData = {};

    deals.forEach((deal) => {
      const dateField = deal.custom_fields_values?.find(
        (field) => field.field_id === this.fieldIds.ORDER_DATE
      );

      if (dateField?.values?.[0]?.value) {
        const dateStr = new Date(dateField.values[0].value * 1000)
          .toISOString()
          .split("T")[0];

        if (!this.state.dealsData[dateStr]) {
          this.state.dealsData[dateStr] = [];
        }

        this.state.dealsData[dateStr].push({
          id: deal.id,
          name: deal.name,
          price: deal.price,
          status_id: deal.status_id,
          custom_fields: {
            [this.fieldIds.DELIVERY_RANGE]: this.getCustomFieldValue(
              deal,
              this.fieldIds.DELIVERY_RANGE
            ),
            [this.fieldIds.EXACT_TIME]: this.getCustomFieldValue(
              deal,
              this.fieldIds.EXACT_TIME
            ),
            [this.fieldIds.ADDRESS]: this.getCustomFieldValue(
              deal,
              this.fieldIds.ADDRESS
            ),
          },
        });
      }
    });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–æ–ª—è
  getCustomFieldValue(deal, fieldId) {
    const field = deal.custom_fields_values?.find(
      (f) => f.field_id === fieldId
    );
    return field?.values?.[0]?.value || null;
  }

  // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
  renderCalendar() {
    const month = this.state.currentDate.getMonth();
    const year = this.state.currentDate.getFullYear();
    const firstDay = new Date(year, month, 1);
    const lastDay = new Date(year, month + 1, 0);
    const startDay = firstDay.getDay() === 0 ? 6 : firstDay.getDay() - 1;

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    const monthTitle = document.getElementById("currentMonthYear");
    if (monthTitle) {
      monthTitle.textContent = `${this.i18n.months[month]} ${year}`;
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ç–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    let calendarHTML = "";

    // –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    this.i18n.weekdays.forEach(
      (day) => (calendarHTML += `<div class="weekday">${day}</div>`)
    );

    // –ü—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –≤ –Ω–∞—á–∞–ª–µ –º–µ—Å—è—Ü–∞
    for (let i = 0; i < startDay; i++) {
      calendarHTML += '<div class="calendar-day empty"></div>';
    }

    // –î–Ω–∏ –º–µ—Å—è—Ü–∞
    for (let day = 1; day <= lastDay.getDate(); day++) {
      const dateStr = `${year}-${String(month + 1).padStart(2, "0")}-${String(
        day
      ).padStart(2, "0")}`;
      const dealsCount = this.state.dealsData[dateStr]?.length || 0;
      const isToday = this.isToday(dateStr);

      const dayClass = [
        "calendar-day",
        isToday ? "today" : "",
        dealsCount > 0 ? "has-deals" : "",
      ]
        .filter(Boolean)
        .join(" ");

      calendarHTML += `
        <div class="${dayClass}" data-date="${dateStr}">
          ${day}
          ${
            dealsCount > 0
              ? `<span class="deal-count">${dealsCount}</span>`
              : ""
          }
        </div>
      `;
    }

    // –í—Å—Ç–∞–≤–∫–∞ –≤ DOM
    const calendarGrid = document.getElementById("calendar");
    if (calendarGrid) {
      calendarGrid.innerHTML = calendarHTML;

      // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
      const days = calendarGrid.querySelectorAll(".calendar-day:not(.empty)");
      days.forEach((day) => {
        day.addEventListener("click", () =>
          this.showDealsForDate(day.dataset.date)
        );
      });
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–¥–µ–ª–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (this.state.selectedDate) {
      this.showDealsForDate(this.state.selectedDate);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∞—Ç–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π
  isToday(dateStr) {
    const today = new Date();
    const checkDate = new Date(dateStr);
    return (
      checkDate.getDate() === today.getDate() &&
      checkDate.getMonth() === today.getMonth() &&
      checkDate.getFullYear() === today.getFullYear()
    );
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —Å–¥–µ–ª–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã
  showDealsForDate(date) {
    this.state.selectedDate = date;
    const dateElement = document.getElementById("selectedDate");

    if (dateElement) {
      const dateObj = new Date(date);
      dateElement.textContent = dateObj.toLocaleDateString("ru-RU", {
        day: "numeric",
        month: "long",
        year: "numeric",
      });
    }

    const deals = this.state.dealsData[date] || [];
    const dealsContainer = document.getElementById("deals");

    if (!dealsContainer) return;

    if (deals.length === 0) {
      dealsContainer.innerHTML = `<div class="no-deals">${this.i18n.errors.noDeals}</div>`;
      return;
    }

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–¥–µ–ª–æ–∫ –ø–æ ID (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    deals.sort((a, b) => b.id - a.id);

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å–¥–µ–ª–æ–∫
    dealsContainer.innerHTML = deals
      .map(
        (deal) => `
      <div class="deal-item" data-deal-id="${deal.id}">
        <div class="deal-header">
          <span class="deal-id">#${deal.id}</span>
          <span class="deal-status">${this.getStatusName(deal.status_id)}</span>
        </div>
        <div class="deal-name">${deal.name}</div>
        <div class="deal-price">${deal.price ? `${deal.price} —Ä—É–±.` : "‚Äî"}</div>
        <div class="deal-field">
          <span>–î–æ—Å—Ç–∞–≤–∫–∞:</span> ${
            deal.custom_fields[this.fieldIds.DELIVERY_RANGE] || "‚Äî"
          }
        </div>
        <div class="deal-field">
          <span>–ê–¥—Ä–µ—Å:</span> ${
            deal.custom_fields[this.fieldIds.ADDRESS] || "‚Äî"
          }
        </div>
      </div>
    `
      )
      .join("");

    // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–¥–µ–ª–∫–∏
    document.querySelectorAll(".deal-item").forEach((deal) => {
      deal.addEventListener("click", (e) => {
        e.stopPropagation();
        this.openDealCard(deal.dataset.dealId);
      });
    });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ ID
  getStatusName(statusId) {
    const statuses = {
      142: "–ù–æ–≤–∞—è",
      143: "–í —Ä–∞–±–æ—Ç–µ",
      144: "–ó–∞–≤–µ—Ä—à–µ–Ω–∞",
      145: "–û—Ç–º–µ–Ω–µ–Ω–∞",
    };
    return statuses[statusId] || `–°—Ç–∞—Ç—É—Å #${statusId}`;
  }

  // –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–¥–µ–ª–∫–∏
  openDealCard(dealId) {
    if (!dealId) return;

    if (this.state.context === "proxy_sdk") {
      AmoProxySDK.openCard(parseInt(dealId));
    } else if (
      this.state.context === "card_sdk" &&
      typeof AmoSDK !== "undefined"
    ) {
      AmoSDK.openCard(parseInt(dealId));
    } else if (typeof AmoCRM !== "undefined") {
      AmoCRM.widgets
        .system()
        .then((system) => system.openCard(parseInt(dealId)));
    } else {
      window.open(
        `https://${this.state.accountDomain}.amocrm.ru/leads/detail/${dealId}`,
        "_blank"
      );
    }
  }

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
  prevMonth() {
    this.state.currentDate.setMonth(this.state.currentDate.getMonth() - 1);
    this.loadData().then(() => this.renderCalendar());
  }

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
  nextMonth() {
    this.state.currentDate.setMonth(this.state.currentDate.getMonth() + 1);
    this.loadData().then(() => this.renderCalendar());
  }

  // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è
  bindCalendarEvents() {
    document
      .getElementById("prevMonth")
      ?.addEventListener("click", () => this.prevMonth());
    document
      .getElementById("nextMonth")
      ?.addEventListener("click", () => this.nextMonth());
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  saveSettings() {
    const newSettings = {
      deal_date_field_id:
        parseInt(document.getElementById("dealDateField")?.value) ||
        this.fieldIds.ORDER_DATE,
      delivery_range_field:
        parseInt(document.getElementById("deliveryRangeField")?.value) ||
        this.fieldIds.DELIVERY_RANGE,
    };

    try {
      if (this.state.context === "proxy_sdk") {
        AmoProxySDK.saveSettings(newSettings)
          .then(() => this.showMessage("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!"))
          .catch(() => this.showError(this.i18n.errors.settingsSave));
      } else if (typeof AmoSDK !== "undefined") {
        AmoSDK.saveSettings(newSettings)
          .then(() => this.showMessage("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!"))
          .catch(() => this.showError(this.i18n.errors.settingsSave));
      } else if (typeof AmoCRM !== "undefined") {
        AmoCRM.widgets
          .system()
          .then((system) => system.saveSettings(newSettings))
          .then(() => this.showMessage("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!"))
          .catch(() => this.showError(this.i18n.errors.settingsSave));
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:", error);
      this.showError(this.i18n.errors.settingsSave);
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–∞–¥–µ—Ä
  showLoader() {
    const loader = document.getElementById("loader");
    if (loader) loader.style.display = "block";
  }

  // –°–∫—Ä—ã—Ç—å –ª–æ–∞–¥–µ—Ä
  hideLoader() {
    const loader = document.getElementById("loader");
    if (loader) loader.style.display = "none";
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
  showError(message) {
    const errorEl =
      document.getElementById("error-alert") || document.createElement("div");
    errorEl.className = "alert alert-danger";
    errorEl.textContent = message;

    if (!document.getElementById("error-alert")) {
      errorEl.id = "error-alert";
      this.container.prepend(errorEl);
    }

    setTimeout(() => {
      errorEl.classList.add("fade-out");
      setTimeout(() => errorEl.remove(), 500);
    }, 5000);
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  showMessage(message) {
    const alertEl = document.createElement("div");
    alertEl.className = "alert alert-success position-fixed top-0 end-0 m-3";
    alertEl.textContent = message;
    document.body.appendChild(alertEl);

    setTimeout(() => {
      alertEl.classList.add("fade-out");
      setTimeout(() => alertEl.remove(), 500);
    }, 3000);
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É
  showFatalError() {
    this.container.innerHTML = `
      <div class="alert alert-danger">
        –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–∂–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.
      </div>
    `;
  }

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ –≤–∏–¥–∂–µ—Ç–∞
  destroy() {
    // –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    document.getElementById("prevMonth")?.removeEventListener("click");
    document.getElementById("nextMonth")?.removeEventListener("click");
    document.getElementById("showFullCalendar")?.removeEventListener("click");
    document.getElementById("authButton")?.removeEventListener("click");
    document.getElementById("saveSettings")?.removeEventListener("click");
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–¥–∂–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
if (typeof AmoWidget === "function") {
  // –†–µ–∂–∏–º amoCRM
  AmoWidget({
    init: function (system) {
      this.system = system;
      this.params = system.params || {};
      this.widget = new OrdersCalendarWidget({
        ...this.params,
        location: system.location,
      });
    },

    render: function () {
      return this.widget.render();
    },

    bind_actions: function () {
      this.widget.bindEvents();
    },

    onSave: function () {
      return this.widget.saveSettings();
    },

    destroy: function () {
      this.widget.destroy();
    },

    onLoad: function () {
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    },
  });
} else {
  // –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º
  document.addEventListener("DOMContentLoaded", function () {
    new OrdersCalendarWidget();
  });
}
